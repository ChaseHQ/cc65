;
; File generated by cc65 v 2.19 - Git e95db437a
;
	.fopt		compiler,"cc65 v 2.19 - Git e95db437a"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "tgidemo.c", 5652, 1657744212
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/stdio.h", 6901, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/stdlib.h", 6145, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/cc65.h", 5230, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/conio.h", 9248, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/stdarg.h", 2970, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/target.h", 3121, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/cbm.h", 12209, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/stddef.h", 3127, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/c64.h", 7085, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/_vic2.h", 11027, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/_sid.h", 3694, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/_6526.h", 4033, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/cbm_filetype.h", 5057, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/ctype.h", 4573, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/modload.h", 5085, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/tgi.h", 11137, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/tgi/tgi-error.h", 3632, 1657744211
	.forceimport	__STARTUP__
	.dbg		sym, "printf", "00", extern, "_printf"
	.dbg		sym, "exit", "00", extern, "_exit"
	.dbg		sym, "_sin", "00", extern, "__sin"
	.dbg		sym, "doesclrscrafterexit", "00", extern, "_doesclrscrafterexit"
	.dbg		sym, "kbhit", "00", extern, "_kbhit"
	.dbg		sym, "cgetc", "00", extern, "_cgetc"
	.dbg		sym, "bordercolor", "00", extern, "_bordercolor"
	.dbg		sym, "tolower", "00", extern, "_tolower"
	.dbg		sym, "tgi_stddrv", "00", extern, "_tgi_stddrv"
	.dbg		sym, "tgi_load_driver", "00", extern, "_tgi_load_driver"
	.dbg		sym, "tgi_unload", "00", extern, "_tgi_unload"
	.dbg		sym, "tgi_init", "00", extern, "_tgi_init"
	.dbg		sym, "tgi_geterror", "00", extern, "_tgi_geterror"
	.dbg		sym, "tgi_clear", "00", extern, "_tgi_clear"
	.dbg		sym, "tgi_setcolor", "00", extern, "_tgi_setcolor"
	.dbg		sym, "tgi_setpalette", "00", extern, "_tgi_setpalette"
	.dbg		sym, "tgi_getmaxx", "00", extern, "_tgi_getmaxx"
	.dbg		sym, "tgi_getmaxy", "00", extern, "_tgi_getmaxy"
	.dbg		sym, "tgi_getaspectratio", "00", extern, "_tgi_getaspectratio"
	.dbg		sym, "tgi_gotoxy", "00", extern, "_tgi_gotoxy"
	.dbg		sym, "tgi_line", "00", extern, "_tgi_line"
	.dbg		sym, "tgi_lineto", "00", extern, "_tgi_lineto"
	.dbg		sym, "tgi_ellipse", "00", extern, "_tgi_ellipse"
	.dbg		sym, "tgi_bar", "00", extern, "_tgi_bar"
	.dbg		sym, "tgi_imulround", "00", extern, "_tgi_imulround"
	.import		_printf
	.import		_exit
	.import		__sin
	.import		_doesclrscrafterexit
	.import		_kbhit
	.import		_cgetc
	.import		_bordercolor
	.import		_tolower
	.import		_tgi_stddrv
	.import		_tgi_load_driver
	.import		_tgi_unload
	.import		_tgi_init
	.import		_tgi_geterror
	.import		_tgi_clear
	.import		_tgi_setcolor
	.import		_tgi_setpalette
	.import		_tgi_getmaxx
	.import		_tgi_getmaxy
	.import		_tgi_getaspectratio
	.import		_tgi_gotoxy
	.import		_tgi_line
	.import		_tgi_lineto
	.import		_tgi_ellipse
	.import		_tgi_bar
	.import		_tgi_imulround
	.export		_main

.segment	"RODATA"

S0002:
	.byte	$D7,$41,$52,$4E,$49,$4E,$47,$3A,$20,$D4,$48,$49,$53,$20,$50,$52
	.byte	$4F,$47,$52,$41,$4D,$20,$4E,$45,$45,$44,$53,$20,$54,$48,$45,$20
	.byte	$D4,$C7,$C9,$0D,$44,$52,$49,$56,$45,$52,$20,$4F,$4E,$20,$44,$49
	.byte	$53,$4B,$21,$20,$D0,$52,$45,$53,$53,$20,$27,$59,$27,$20,$49,$46
	.byte	$20,$59,$4F,$55,$20,$48,$41,$56,$45,$0D,$49,$54,$20,$2D,$20,$41
	.byte	$4E,$59,$20,$4F,$54,$48,$45,$52,$20,$4B,$45,$59,$20,$45,$58,$49
	.byte	$54,$53,$2E,$0D,$00
S0003:
	.byte	$CF,$CB,$2E,$20,$D0,$4C,$45,$41,$53,$45,$20,$57,$41,$49,$54,$20
	.byte	$50,$41,$54,$49,$45,$4E,$54,$4C,$59,$2E,$2E,$2E,$0D,$00
S0004:
	.byte	$54,$47,$49,$A4,$4C,$4F,$41,$44,$A4,$44,$52,$49,$56,$45,$52,$00
S0005:
	.byte	$54,$47,$49,$A4,$49,$4E,$49,$54,$00
S0001:
	.byte	$25,$53,$3A,$20,$25,$55,$0D,$00
S0006:
	.byte	$C4,$4F,$4E,$45,$0D,$00

.segment	"BSS"

_MaxX:
	.res	2,$00
_MaxY:
	.res	2,$00
_AspectRatio:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ CheckError (const char *S)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CheckError: near

	.dbg	func, "CheckError", "00", static, "_CheckError"
	.dbg	sym, "S", "00", auto, 0
	.dbg	sym, "Error", "00", auto, -1

.segment	"CODE"

;
; {
;
	.dbg	line, "tgidemo.c", 39
	jsr     pushax
;
; unsigned char Error = tgi_geterror ();
;
	.dbg	line, "tgidemo.c", 40
	jsr     _tgi_geterror
	jsr     pusha
;
; if (Error != TGI_ERR_OK) {
;
	.dbg	line, "tgidemo.c", 42
	ldy     #$00
	lda     (sp),y
	beq     L0002
;
; printf ("%s: %u\n", S, Error);
;
	.dbg	line, "tgidemo.c", 43
	lda     #<(S0001)
	ldx     #>(S0001)
	jsr     pushax
	ldy     #$06
	jsr     pushwysp
	ldy     #$04
	lda     (sp),y
	jsr     pusha0
	ldy     #$06
	jsr     _printf
;
; if (doesclrscrafterexit ()) {
;
	.dbg	line, "tgidemo.c", 44
	jsr     _doesclrscrafterexit
	tax
	beq     L0004
;
; cgetc ();
;
	.dbg	line, "tgidemo.c", 45
	jsr     _cgetc
;
; exit (EXIT_FAILURE);
;
	.dbg	line, "tgidemo.c", 47
	ldx     #$00
L0004:	lda     #$01
	jsr     _exit
;
; }
;
	.dbg	line, "tgidemo.c", 49
L0002:	jmp     incsp3

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ DoWarning (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DoWarning: near

	.dbg	func, "DoWarning", "00", static, "_DoWarning"

.segment	"CODE"

;
; "it - any other key exits.\n");
;
	.dbg	line, "tgidemo.c", 59
	lda     #<(S0002)
	ldx     #>(S0002)
	jsr     pushax
	ldy     #$02
	jsr     _printf
;
; if (tolower (cgetc ()) != 'y') {
;
	.dbg	line, "tgidemo.c", 60
	jsr     _cgetc
	jsr     _tolower
	cpx     #$00
	bne     L0004
	cmp     #$59
	beq     L0002
;
; exit (EXIT_SUCCESS);
;
	.dbg	line, "tgidemo.c", 61
L0004:	ldx     #$00
	txa
	jsr     _exit
;
; printf ("OK. Please wait patiently...\n");
;
	.dbg	line, "tgidemo.c", 63
L0002:	lda     #<(S0003)
	ldx     #>(S0003)
	jsr     pushax
	ldy     #$02
	jmp     _printf

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ DoCircles (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DoCircles: near

	.dbg	func, "DoCircles", "00", static, "_DoCircles"
	.dbg	sym, "I", "00", auto, -1
	.dbg	sym, "Color", "00", auto, -2
	.dbg	sym, "X", "00", auto, -4
	.dbg	sym, "Y", "00", auto, -6
	.dbg	sym, "Limit", "00", auto, -8

.segment	"CODE"

;
; unsigned char Color = COLOR_BACK;
;
	.dbg	line, "tgidemo.c", 73
	jsr     decsp1
	lda     #$00
	jsr     pusha
;
; const unsigned X = MaxX / 2;
;
	.dbg	line, "tgidemo.c", 74
	lda     _MaxX
	ldx     _MaxX+1
	jsr     shrax1
	jsr     pushax
;
; const unsigned Y = MaxY / 2;
;
	.dbg	line, "tgidemo.c", 75
	lda     _MaxY
	ldx     _MaxY+1
	jsr     shrax1
	jsr     pushax
;
; const unsigned Limit = (X < Y) ? Y : X;
;
	.dbg	line, "tgidemo.c", 76
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcc     L000D
	ldy     #$03
L000D:	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
;
; tgi_setpalette (Palette);
;
	.dbg	line, "tgidemo.c", 78
	lda     #<(M0001)
	ldx     #>(M0001)
	jsr     _tgi_setpalette
;
; tgi_setcolor (COLOR_FORE);
;
	.dbg	line, "tgidemo.c", 79
	lda     #$01
	jsr     _tgi_setcolor
;
; tgi_clear ();
;
	.dbg	line, "tgidemo.c", 80
	jsr     _tgi_clear
;
; tgi_line (0, 0, MaxX, MaxY);
;
	.dbg	line, "tgidemo.c", 81
	jsr     decsp6
	lda     #$00
	ldy     #$04
	sta     (sp),y
	iny
	sta     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	sta     (sp),y
	lda     _MaxX
	ldy     #$00
	sta     (sp),y
	iny
	lda     _MaxX+1
	sta     (sp),y
	lda     _MaxY
	ldx     _MaxY+1
	jsr     _tgi_line
;
; tgi_line (0, MaxY, MaxX, 0);
;
	.dbg	line, "tgidemo.c", 82
	jsr     decsp6
	lda     #$00
	ldy     #$04
	sta     (sp),y
	iny
	sta     (sp),y
	lda     _MaxY
	ldy     #$02
	sta     (sp),y
	iny
	lda     _MaxY+1
	sta     (sp),y
	lda     _MaxX
	ldy     #$00
	sta     (sp),y
	iny
	lda     _MaxX+1
	sta     (sp),y
	ldx     #$00
	txa
	jsr     _tgi_line
;
; while (!kbhit ()) {
;
	.dbg	line, "tgidemo.c", 83
	jmp     L000A
;
; Color = (Color == COLOR_FORE) ? COLOR_BACK : COLOR_FORE;
;
	.dbg	line, "tgidemo.c", 84
L0004:	ldy     #$06
	lda     (sp),y
	cmp     #$01
	bne     L000F
	txa
	jmp     L0011
L000F:	lda     #$01
L0011:	sta     (sp),y
;
; tgi_setcolor (Color);
;
	.dbg	line, "tgidemo.c", 85
	jsr     _tgi_setcolor
;
; for (I = 10; I <= Limit; I += 10) {
;
	.dbg	line, "tgidemo.c", 86
	lda     #$0A
	ldy     #$07
L000E:	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	sec
	ldy     #$00
	sbc     (sp),y
	sta     tmp1
	txa
	iny
	sbc     (sp),y
	ora     tmp1
	bcc     L000C
	bne     L000A
;
; tgi_ellipse (X, Y, I, tgi_imulround (I, AspectRatio));
;
	.dbg	line, "tgidemo.c", 87
L000C:	jsr     decsp5
	ldy     #$0A
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$03
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$0C
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	ldy     #$0C
	lda     (sp),y
	jsr     pusha0
	lda     _AspectRatio
	ldx     _AspectRatio+1
	jsr     _tgi_imulround
	jsr     _tgi_ellipse
;
; for (I = 10; I <= Limit; I += 10) {
;
	.dbg	line, "tgidemo.c", 86
	ldy     #$07
	clc
	lda     #$0A
	adc     (sp),y
	jmp     L000E
;
; while (!kbhit ()) {
;
	.dbg	line, "tgidemo.c", 83
L000A:	jsr     _kbhit
	tax
	beq     L0004
;
; cgetc ();
;
	.dbg	line, "tgidemo.c", 91
	jsr     _cgetc
;
; }
;
	.dbg	line, "tgidemo.c", 92
	jmp     incsp8

	.dbg	line
.segment	"RODATA"

M0001:
	.byte	$01
	.byte	$06

.endproc

; ---------------------------------------------------------------
; void __near__ DoCheckerboard (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DoCheckerboard: near

	.dbg	func, "DoCheckerboard", "00", static, "_DoCheckerboard"
	.dbg	sym, "X", "00", auto, -2
	.dbg	sym, "Y", "00", auto, -4
	.dbg	sym, "Color", "00", auto, -5

.segment	"CODE"

;
; unsigned char Color = COLOR_BACK;
;
	.dbg	line, "tgidemo.c", 100
	jsr     decsp4
	lda     #$00
	jsr     pusha
;
; tgi_setpalette (Palette);
;
	.dbg	line, "tgidemo.c", 102
	lda     #<(M0001)
	ldx     #>(M0001)
	jsr     _tgi_setpalette
;
; tgi_clear ();
;
	.dbg	line, "tgidemo.c", 103
	jsr     _tgi_clear
;
; for (Y = 0; Y <= MaxY; Y += 10) {
;
	.dbg	line, "tgidemo.c", 106
L0016:	ldy     #$01
	lda     #$00
	sta     (sp),y
	iny
L0021:	sta     (sp),y
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     _MaxY
	sta     tmp1
	txa
	sbc     _MaxY+1
	ora     tmp1
	bcc     L0008
	jne     L0006
;
; for (X = 0; X <= MaxX; X += 10) {
;
	.dbg	line, "tgidemo.c", 107
L0008:	ldy     #$03
	lda     #$00
	sta     (sp),y
	iny
L0020:	sta     (sp),y
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     _MaxX
	sta     tmp1
	txa
	sbc     _MaxX+1
	ora     tmp1
	bcc     L000C
	bne     L000A
;
; Color = (Color == COLOR_FORE) ? COLOR_BACK : COLOR_FORE;
;
	.dbg	line, "tgidemo.c", 108
L000C:	ldy     #$00
	lda     (sp),y
	cmp     #$01
	bne     L0017
	tya
	jmp     L0019
L0017:	lda     #$01
L0019:	sta     (sp),y
;
; tgi_setcolor (Color);
;
	.dbg	line, "tgidemo.c", 109
	jsr     _tgi_setcolor
;
; tgi_bar (X, Y, X+9, Y+9);
;
	.dbg	line, "tgidemo.c", 110
	jsr     decsp6
	ldy     #$0A
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$0A
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$09
	bcc     L000F
	inx
L000F:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$09
	bcc     L0010
	inx
L0010:	jsr     _tgi_bar
;
; if (kbhit ()) {
;
	.dbg	line, "tgidemo.c", 111
	jsr     _kbhit
	tax
	beq     L000B
;
; cgetc ();
;
	.dbg	line, "tgidemo.c", 112
	jsr     _cgetc
;
; return;
;
	.dbg	line, "tgidemo.c", 113
	jmp     incsp5
;
; for (X = 0; X <= MaxX; X += 10) {
;
	.dbg	line, "tgidemo.c", 107
L000B:	ldy     #$03
	clc
	lda     #$0A
	adc     (sp),y
	sta     (sp),y
	iny
	txa
	adc     (sp),y
	jmp     L0020
;
; Color = Color == COLOR_FORE ? COLOR_BACK : COLOR_FORE;
;
	.dbg	line, "tgidemo.c", 116
L000A:	ldy     #$00
	lda     (sp),y
	cmp     #$01
	bne     L001A
	tya
	jmp     L001C
L001A:	lda     #$01
L001C:	sta     (sp),y
;
; for (Y = 0; Y <= MaxY; Y += 10) {
;
	.dbg	line, "tgidemo.c", 106
	iny
	clc
	lda     #$0A
	adc     (sp),y
	sta     (sp),y
	iny
	lda     #$00
	adc     (sp),y
	jmp     L0021
;
; Color = Color == COLOR_FORE ? COLOR_BACK : COLOR_FORE;
;
	.dbg	line, "tgidemo.c", 118
L0006:	dey
	lda     (sp),y
	cmp     #$01
	bne     L001D
	tya
	jmp     L001F
L001D:	lda     #$01
L001F:	sta     (sp),y
;
; while (1) {
;
	.dbg	line, "tgidemo.c", 105
	jmp     L0016

	.dbg	line
.segment	"RODATA"

M0001:
	.byte	$01
	.byte	$00

.endproc

; ---------------------------------------------------------------
; void __near__ DoDiagram (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DoDiagram: near

	.dbg	func, "DoDiagram", "00", static, "_DoDiagram"
	.dbg	sym, "XOrigin", "00", auto, -2
	.dbg	sym, "YOrigin", "00", auto, -4
	.dbg	sym, "Amp", "00", auto, -6
	.dbg	sym, "X", "00", auto, -8
	.dbg	sym, "Y", "00", auto, -10
	.dbg	sym, "I", "00", auto, -12

.segment	"CODE"

;
; tgi_setpalette (Palette);
;
	.dbg	line, "tgidemo.c", 132
	ldy     #$0C
	jsr     subysp
	lda     #<(M0001)
	ldx     #>(M0001)
	jsr     _tgi_setpalette
;
; tgi_setcolor (COLOR_FORE);
;
	.dbg	line, "tgidemo.c", 133
	lda     #$01
	jsr     _tgi_setcolor
;
; tgi_clear ();
;
	.dbg	line, "tgidemo.c", 134
	jsr     _tgi_clear
;
; YOrigin = MaxY / 2;
;
	.dbg	line, "tgidemo.c", 137
	lda     _MaxY
	ldx     _MaxY+1
	jsr     shrax1
	ldy     #$08
	jsr     staxysp
;
; XOrigin = 10;
;
	.dbg	line, "tgidemo.c", 138
	ldy     #$0A
	tya
	sta     (sp),y
	lda     #$00
	iny
	sta     (sp),y
;
; Amp     = (MaxY - 19) / 2;
;
	.dbg	line, "tgidemo.c", 139
	lda     _MaxY
	ldx     _MaxY+1
	sec
	sbc     #$13
	bcs     L0002
	dex
L0002:	jsr     shrax1
	ldy     #$06
	jsr     staxysp
;
; tgi_line (XOrigin, 10, XOrigin, MaxY-10);
;
	.dbg	line, "tgidemo.c", 142
	jsr     decsp6
	ldy     #$11
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$0A
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	ldy     #$11
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _MaxY
	ldx     _MaxY+1
	sec
	sbc     #$0A
	bcs     L0003
	dex
L0003:	jsr     _tgi_line
;
; tgi_line (XOrigin-2, 12, XOrigin, 10);
;
	.dbg	line, "tgidemo.c", 143
	jsr     decsp6
	ldy     #$11
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     #$02
	bcs     L0004
	dex
L0004:	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$0C
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	ldy     #$11
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _tgi_line
;
; tgi_lineto (XOrigin+2, 12);
;
	.dbg	line, "tgidemo.c", 144
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$02
	bcc     L0005
	inx
L0005:	jsr     pushax
	ldx     #$00
	lda     #$0C
	jsr     _tgi_lineto
;
; tgi_line (XOrigin, YOrigin, MaxX-10, YOrigin);
;
	.dbg	line, "tgidemo.c", 147
	jsr     decsp6
	ldy     #$11
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$0F
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _MaxX
	ldx     _MaxX+1
	sec
	sbc     #$0A
	bcs     L0006
	dex
L0006:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$0F
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _tgi_line
;
; tgi_line (MaxX-12, YOrigin-2, MaxX-10, YOrigin);
;
	.dbg	line, "tgidemo.c", 148
	jsr     decsp6
	lda     _MaxX
	ldx     _MaxX+1
	sec
	sbc     #$0C
	bcs     L0007
	dex
L0007:	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$0F
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     #$02
	bcs     L0008
	dex
L0008:	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _MaxX
	ldx     _MaxX+1
	sec
	sbc     #$0A
	bcs     L0009
	dex
L0009:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$0F
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _tgi_line
;
; tgi_lineto (MaxX-12, YOrigin+2);
;
	.dbg	line, "tgidemo.c", 149
	lda     _MaxX
	ldx     _MaxX+1
	sec
	sbc     #$0C
	bcs     L000A
	dex
L000A:	jsr     pushax
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$02
	bcc     L000B
	inx
L000B:	jsr     _tgi_lineto
;
; tgi_gotoxy (XOrigin, YOrigin);
;
	.dbg	line, "tgidemo.c", 152
	ldy     #$0D
	jsr     pushwysp
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _tgi_gotoxy
;
; for (I = 0; I <= 360; I += 5) {
;
	.dbg	line, "tgidemo.c", 153
	ldy     #$00
	tya
	sta     (sp),y
	iny
L0015:	sta     (sp),y
	cmp     #$01
	bne     L0010
	dey
	lda     (sp),y
	cmp     #$69
L0010:	jcs     L000D
;
; X = (int) (((long) (MaxX - 19) * I) / 360);
;
	.dbg	line, "tgidemo.c", 156
	lda     _MaxX
	ldx     _MaxX+1
	sec
	sbc     #$13
	bcs     L0011
	dex
L0011:	jsr     push0ax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosmul0ax
	jsr     pusheax
	ldx     #$01
	lda     #$68
	jsr     tosdiv0ax
	ldy     #$04
	jsr     staxysp
;
; Y = (int) (((long) Amp * -_sin (I)) / 256);
;
	.dbg	line, "tgidemo.c", 157
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     axlong
	jsr     pusheax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     __sin
	jsr     negax
	jsr     axlong
	jsr     tosmuleax
	ldy     sreg+1
	bpl     L0012
	jsr     saveeax
	cmp     #$01
	txa
	sbc     #$FF
	lda     sreg
	sbc     #$FF
	lda     sreg+1
	sbc     #$FF
	jsr     boolult
	lsr     a
	jsr     resteax
	bcs     L0012
	ldx     #$00
	txa
	jmp     L0013
L0012:	txa
	ldx     sreg
	ldy     sreg+1
	cpy     #$80
L0013:	ldy     #$02
	jsr     staxysp
;
; tgi_lineto (XOrigin + X, YOrigin + Y);
;
	.dbg	line, "tgidemo.c", 160
	ldy     #$0A
	lda     (sp),y
	ldy     #$04
	clc
	adc     (sp),y
	pha
	ldy     #$0B
	lda     (sp),y
	ldy     #$05
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$0A
	lda     (sp),y
	ldy     #$04
	clc
	adc     (sp),y
	pha
	ldy     #$0B
	lda     (sp),y
	ldy     #$05
	adc     (sp),y
	tax
	pla
	jsr     _tgi_lineto
;
; for (I = 0; I <= 360; I += 5) {
;
	.dbg	line, "tgidemo.c", 153
	ldy     #$00
	clc
	lda     #$05
	adc     (sp),y
	sta     (sp),y
	iny
	lda     #$00
	adc     (sp),y
	jmp     L0015
;
; cgetc ();
;
	.dbg	line, "tgidemo.c", 163
L000D:	jsr     _cgetc
;
; }
;
	.dbg	line, "tgidemo.c", 164
	ldy     #$0C
	jmp     addysp

	.dbg	line
.segment	"RODATA"

M0001:
	.byte	$01
	.byte	$00

.endproc

; ---------------------------------------------------------------
; void __near__ DoLines (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DoLines: near

	.dbg	func, "DoLines", "00", static, "_DoLines"
	.dbg	sym, "X", "00", auto, -2
	.dbg	sym, "Min", "00", auto, -4

.segment	"CODE"

;
; const unsigned Min = (MaxX < MaxY) ? MaxX : MaxY;
;
	.dbg	line, "tgidemo.c", 172
	jsr     decsp2
	lda     _MaxX
	cmp     _MaxY
	lda     _MaxX+1
	sbc     _MaxY+1
	bcs     L0002
	lda     _MaxX
	ldx     _MaxX+1
	jmp     L0003
L0002:	lda     _MaxY
	ldx     _MaxY+1
L0003:	jsr     pushax
;
; tgi_setpalette (Palette);
;
	.dbg	line, "tgidemo.c", 174
	lda     #<(M0001)
	ldx     #>(M0001)
	jsr     _tgi_setpalette
;
; tgi_setcolor (COLOR_FORE);
;
	.dbg	line, "tgidemo.c", 175
	lda     #$01
	jsr     _tgi_setcolor
;
; tgi_clear ();
;
	.dbg	line, "tgidemo.c", 176
	jsr     _tgi_clear
;
; for (X = 0; X <= Min; X += 10) {
;
	.dbg	line, "tgidemo.c", 178
	ldy     #$02
	lda     #$00
	sta     (sp),y
	iny
L0008:	sta     (sp),y
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$00
	sbc     (sp),y
	sta     tmp1
	txa
	iny
	sbc     (sp),y
	ora     tmp1
	bcc     L0007
	jne     L0005
;
; tgi_line (0, 0, Min, X);
;
	.dbg	line, "tgidemo.c", 179
L0007:	jsr     decsp6
	lda     #$00
	ldy     #$04
	sta     (sp),y
	iny
	sta     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _tgi_line
;
; tgi_line (0, 0, X, Min);
;
	.dbg	line, "tgidemo.c", 180
	jsr     decsp6
	lda     #$00
	ldy     #$04
	sta     (sp),y
	iny
	sta     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _tgi_line
;
; tgi_line (Min, Min, 0, Min-X);
;
	.dbg	line, "tgidemo.c", 181
	jsr     decsp6
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$08
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     _tgi_line
;
; tgi_line (Min, Min, Min-X, 0);
;
	.dbg	line, "tgidemo.c", 182
	jsr     decsp6
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$08
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	txa
	jsr     _tgi_line
;
; for (X = 0; X <= Min; X += 10) {
;
	.dbg	line, "tgidemo.c", 178
	ldy     #$02
	clc
	lda     #$0A
	adc     (sp),y
	sta     (sp),y
	iny
	lda     #$00
	adc     (sp),y
	jmp     L0008
;
; cgetc ();
;
	.dbg	line, "tgidemo.c", 185
L0005:	jsr     _cgetc
;
; }
;
	.dbg	line, "tgidemo.c", 186
	jmp     incsp4

	.dbg	line
.segment	"RODATA"

M0001:
	.byte	$01
	.byte	$00

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"
	.dbg	sym, "Border", "00", auto, -1

.segment	"CODE"

;
; DoWarning ();
;
	.dbg	line, "tgidemo.c", 196
	jsr     decsp1
	jsr     _DoWarning
;
; tgi_load_driver (tgi_stddrv);
;
	.dbg	line, "tgidemo.c", 199
	lda     #<(_tgi_stddrv)
	ldx     #>(_tgi_stddrv)
	jsr     _tgi_load_driver
;
; CheckError ("tgi_load_driver");
;
	.dbg	line, "tgidemo.c", 200
	lda     #<(S0004)
	ldx     #>(S0004)
	jsr     _CheckError
;
; tgi_init ();
;
	.dbg	line, "tgidemo.c", 207
	jsr     _tgi_init
;
; CheckError ("tgi_init");
;
	.dbg	line, "tgidemo.c", 208
	lda     #<(S0005)
	ldx     #>(S0005)
	jsr     _CheckError
;
; MaxX = tgi_getmaxx ();
;
	.dbg	line, "tgidemo.c", 211
	jsr     _tgi_getmaxx
	sta     _MaxX
	stx     _MaxX+1
;
; MaxY = tgi_getmaxy ();
;
	.dbg	line, "tgidemo.c", 212
	jsr     _tgi_getmaxy
	sta     _MaxY
	stx     _MaxY+1
;
; AspectRatio = tgi_getaspectratio ();
;
	.dbg	line, "tgidemo.c", 213
	jsr     _tgi_getaspectratio
	sta     _AspectRatio
	stx     _AspectRatio+1
;
; Border = bordercolor (COLOR_BLACK);
;
	.dbg	line, "tgidemo.c", 216
	lda     #$00
	jsr     _bordercolor
	ldy     #$00
	sta     (sp),y
;
; DoCircles ();
;
	.dbg	line, "tgidemo.c", 219
	jsr     _DoCircles
;
; DoCheckerboard ();
;
	.dbg	line, "tgidemo.c", 220
	jsr     _DoCheckerboard
;
; DoDiagram ();
;
	.dbg	line, "tgidemo.c", 221
	jsr     _DoDiagram
;
; DoLines ();
;
	.dbg	line, "tgidemo.c", 222
	jsr     _DoLines
;
; tgi_unload ();
;
	.dbg	line, "tgidemo.c", 226
	jsr     _tgi_unload
;
; (void) bordercolor (Border);
;
	.dbg	line, "tgidemo.c", 233
	ldy     #$00
	lda     (sp),y
	jsr     _bordercolor
;
; printf ("Done\n");
;
	.dbg	line, "tgidemo.c", 236
	lda     #<(S0006)
	ldx     #>(S0006)
	jsr     pushax
	ldy     #$02
	jsr     _printf
;
; return EXIT_SUCCESS;
;
	.dbg	line, "tgidemo.c", 237
	ldx     #$00
	txa
;
; }
;
	.dbg	line, "tgidemo.c", 238
	jmp     incsp1

	.dbg	line
.endproc

