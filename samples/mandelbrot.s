;
; File generated by cc65 v 2.19 - Git e95db437a
;
	.fopt		compiler,"cc65 v 2.19 - Git e95db437a"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "mandelbrot.c", 4262, 1657744212
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/stdlib.h", 6145, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/time.h", 5386, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/conio.h", 9248, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/stdarg.h", 2970, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/target.h", 3121, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/cbm.h", 12209, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/stddef.h", 3127, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/c64.h", 7085, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/_vic2.h", 11027, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/_sid.h", 3694, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/_6526.h", 4033, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/cbm_filetype.h", 5057, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/tgi.h", 11137, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/tgi/tgi-error.h", 3632, 1657744211
	.dbg		file, "/cygdrive/c/Users/Craig Vella/Documents/GitHub/cc65/include/cc65.h", 5230, 1657744211
	.forceimport	__STARTUP__
	.dbg		sym, "abs", "00", extern, "_abs"
	.dbg		sym, "exit", "00", extern, "_exit"
	.dbg		sym, "clock", "00", extern, "_clock"
	.dbg		sym, "clrscr", "00", extern, "_clrscr"
	.dbg		sym, "cputs", "00", extern, "_cputs"
	.dbg		sym, "cprintf", "00", extern, "_cprintf"
	.dbg		sym, "cgetc", "00", extern, "_cgetc"
	.dbg		sym, "tgi_stddrv", "00", extern, "_tgi_stddrv"
	.dbg		sym, "tgi_load_driver", "00", extern, "_tgi_load_driver"
	.dbg		sym, "tgi_init", "00", extern, "_tgi_init"
	.dbg		sym, "tgi_done", "00", extern, "_tgi_done"
	.dbg		sym, "tgi_geterror", "00", extern, "_tgi_geterror"
	.dbg		sym, "tgi_geterrormsg", "00", extern, "_tgi_geterrormsg"
	.dbg		sym, "tgi_clear", "00", extern, "_tgi_clear"
	.dbg		sym, "tgi_getcolorcount", "00", extern, "_tgi_getcolorcount"
	.dbg		sym, "tgi_setcolor", "00", extern, "_tgi_setcolor"
	.dbg		sym, "tgi_getxres", "00", extern, "_tgi_getxres"
	.dbg		sym, "tgi_getyres", "00", extern, "_tgi_getyres"
	.dbg		sym, "tgi_setpixel", "00", extern, "_tgi_setpixel"
	.dbg		sym, "doesclrscrafterexit", "00", extern, "_doesclrscrafterexit"
	.import		_abs
	.import		_exit
	.import		_clock
	.import		_clrscr
	.import		_cputs
	.import		_cprintf
	.import		_cgetc
	.import		_tgi_stddrv
	.import		_tgi_load_driver
	.import		_tgi_init
	.import		_tgi_done
	.import		_tgi_geterror
	.import		_tgi_geterrormsg
	.import		_tgi_clear
	.import		_tgi_getcolorcount
	.import		_tgi_setcolor
	.import		_tgi_getxres
	.import		_tgi_getyres
	.import		_tgi_setpixel
	.import		_doesclrscrafterexit
	.export		_mandelbrot
	.export		_main

.segment	"RODATA"

S0003:
	.byte	$C5,$52,$52,$4F,$52,$20,$23,$25,$44,$20,$49,$4E,$49,$54,$49,$41
	.byte	$4C,$49,$5A,$49,$4E,$47,$20,$47,$52,$41,$50,$48,$49,$43,$53,$2E
	.byte	$0A,$0D,$25,$53,$0A,$0D,$00
S0006:
	.byte	$D0,$52,$45,$53,$53,$20,$41,$4E,$59,$20,$4B,$45,$59,$20,$57,$48
	.byte	$45,$4E,$20,$44,$4F,$4E,$45,$2E,$2E,$2E,$0D,$0A,$00
S0002:
	.byte	$49,$4E,$49,$54,$49,$41,$4C,$49,$5A,$49,$4E,$47,$2E,$2E,$2E,$20
	.byte	$4D,$4F,$4D,$50,$4C,$53,$0A,$0D,$00
S0005:
	.byte	$54,$49,$4D,$45,$20,$20,$3A,$20,$25,$4C,$55,$2E,$25,$55,$53,$0D
	.byte	$0A,$00
S0004:
	.byte	$4F,$4B,$2E,$0D,$0A,$00

; ---------------------------------------------------------------
; void __near__ mandelbrot (short x1, short y1, short x2, short y2)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_mandelbrot: near

	.dbg	func, "mandelbrot", "00", extern, "_mandelbrot"
	.dbg	sym, "x1", "00", auto, 6
	.dbg	sym, "y1", "00", auto, 4
	.dbg	sym, "x2", "00", auto, 2
	.dbg	sym, "y2", "00", auto, 0
	.dbg	sym, "count", "00", register, "regbank", 5
	.dbg	sym, "r", "00", register, "regbank", 3
	.dbg	sym, "r1", "00", register, "regbank", 1
	.dbg	sym, "maxcol", "00", register, "regbank", 0

.segment	"CODE"

;
; {
;
	.dbg	line, "mandelbrot.c", 50
	jsr     pushax
;
; register unsigned char count;
;
	.dbg	line, "mandelbrot.c", 51
	lda     regbank+5
	jsr     pusha
;
; register signed short r, r1, i;
;
	.dbg	line, "mandelbrot.c", 52
	lda     regbank+3
	ldx     regbank+4
	jsr     pushax
	lda     regbank+1
	ldx     regbank+2
	jsr     pushax
;
; register unsigned char maxcol = MAXCOL;
;
	.dbg	line, "mandelbrot.c", 55
	lda     regbank+0
	jsr     pusha
	jsr     _tgi_getcolorcount
	sta     regbank+0
;
; xs = ((x2 - x1) / (SCREEN_X));
;
	.dbg	line, "mandelbrot.c", 58
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$0C
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     pushax
	jsr     _tgi_getxres
	jsr     tosudivax
	sta     M0002
	stx     M0002+1
;
; ys = ((y2 - y1) / (SCREEN_Y));
;
	.dbg	line, "mandelbrot.c", 59
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$0A
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     pushax
	jsr     _tgi_getyres
	jsr     tosudivax
	sta     M0003
	stx     M0003+1
;
; yy = y1;
;
	.dbg	line, "mandelbrot.c", 61
	ldy     #$0B
	lda     (sp),y
	sta     M0005+1
	dey
	lda     (sp),y
	sta     M0005
;
; for (y = 0; y < (SCREEN_Y); y++) {
;
	.dbg	line, "mandelbrot.c", 62
	lda     #$00
	sta     M0007
	sta     M0007+1
L0002:	lda     M0007
	ldx     M0007+1
	jsr     pushax
	jsr     _tgi_getyres
	jsr     tosicmp
	jcs     L0003
;
; yy += ys;
;
	.dbg	line, "mandelbrot.c", 63
	lda     M0003
	clc
	adc     M0005
	sta     M0005
	lda     M0003+1
	adc     M0005+1
	sta     M0005+1
;
; xx = x1;
;
	.dbg	line, "mandelbrot.c", 64
	ldy     #$0D
	lda     (sp),y
	sta     M0004+1
	dey
	lda     (sp),y
	sta     M0004
;
; for (x = 0; x < (SCREEN_X); x++) {
;
	.dbg	line, "mandelbrot.c", 65
	lda     #$00
	sta     M0006
	sta     M0006+1
L0007:	lda     M0006
	ldx     M0006+1
	jsr     pushax
	jsr     _tgi_getxres
	jsr     tosicmp
	jcs     L0004
;
; xx += xs;
;
	.dbg	line, "mandelbrot.c", 66
	lda     M0002
	clc
	adc     M0004
	sta     M0004
	lda     M0002+1
	adc     M0004+1
	sta     M0004+1
;
; r = 0;
;
	.dbg	line, "mandelbrot.c", 68
	lda     #$00
	sta     regbank+3
	sta     regbank+3+1
;
; i = 0;
;
	.dbg	line, "mandelbrot.c", 69
	sta     M0001
	sta     M0001+1
;
; for (count = 0; (count < maxiterations) &&
;
	.dbg	line, "mandelbrot.c", 70
	sta     regbank+5
L0022:	lda     regbank+5
	cmp     #$20
	jcs     L0026
;
; (fpabs (r) < tofp (2)) && (fpabs (i) < tofp (2));
;
	.dbg	line, "mandelbrot.c", 71
	lda     regbank+3
	ldx     regbank+3+1
	jsr     _abs
	cmp     #$00
	txa
	sbc     #$08
	bvc     L0011
	eor     #$80
L0011:	asl     a
	jcc     L0026
	lda     M0001
	ldx     M0001+1
	jsr     _abs
	cmp     #$00
	txa
	sbc     #$08
	bvc     L0012
	eor     #$80
L0012:	bmi     L000F
	jmp     L0026
;
; r1 = (mulfp (r, r) - mulfp (i, i)) + xx;
;
	.dbg	line, "mandelbrot.c", 73
L000F:	lda     regbank+3
	ldx     regbank+3+1
	jsr     axlong
	jsr     pusheax
	lda     regbank+3
	ldx     regbank+3+1
	jsr     axlong
	jsr     tosmuleax
	txa
	ldx     sreg
	ldy     sreg+1
	sty     sreg
	cpy     #$80
	ldy     #$00
	bcc     L0015
	dey
L0015:	sty     sreg+1
	jsr     asreax2
	jsr     pusheax
	lda     M0001
	ldx     M0001+1
	jsr     axlong
	jsr     pusheax
	lda     M0001
	ldx     M0001+1
	jsr     axlong
	jsr     tosmuleax
	txa
	ldx     sreg
	ldy     sreg+1
	sty     sreg
	cpy     #$80
	ldy     #$00
	bcc     L0016
	dey
L0016:	sty     sreg+1
	jsr     asreax2
	jsr     tossubeax
	jsr     pusheax
	jsr     axlong
	lda     M0004
	ldx     M0004+1
	jsr     tosaddeax
	sta     regbank+1
	stx     regbank+1+1
;
; i = (((signed long) r * i) >> (fpshift - 1)) + yy;
;
	.dbg	line, "mandelbrot.c", 75
	lda     regbank+3
	ldx     regbank+3+1
	jsr     axlong
	jsr     pusheax
	lda     M0001
	ldx     M0001+1
	jsr     axlong
	jsr     tosmuleax
	txa
	ldx     sreg
	ldy     sreg+1
	sty     sreg
	cpy     #$80
	ldy     #$00
	bcc     L0017
	dey
L0017:	sty     sreg+1
	jsr     asreax1
	jsr     pusheax
	jsr     axlong
	lda     M0005
	ldx     M0005+1
	jsr     tosaddeax
	sta     M0001
	stx     M0001+1
;
; r = r1;
;
	.dbg	line, "mandelbrot.c", 76
	lda     regbank+1+1
	sta     regbank+3+1
	lda     regbank+1
	sta     regbank+3
;
; ++count) {
;
	.dbg	line, "mandelbrot.c", 72
	inc     regbank+5
	jmp     L0022
;
; if (count == maxiterations) {
;
	.dbg	line, "mandelbrot.c", 78
L0026:	lda     regbank+5
	cmp     #$20
	bne     L0027
;
; tgi_setcolor (0);
;
	.dbg	line, "mandelbrot.c", 79
	lda     #$00
;
; } else {
;
	.dbg	line, "mandelbrot.c", 80
	jmp     L0021
;
; switch (maxcol) {
;
	.dbg	line, "mandelbrot.c", 81
L0027:	lda     regbank+0
;
; }
;
	.dbg	line, "mandelbrot.c", 90
	beq     L0028
	cmp     #$02
	bne     L0029
;
; tgi_setcolor (1);
;
	.dbg	line, "mandelbrot.c", 83
	lda     #$01
;
; break;
;
	.dbg	line, "mandelbrot.c", 84
	jmp     L0021
;
; tgi_setcolor (count);
;
	.dbg	line, "mandelbrot.c", 86
L0028:	lda     regbank+5
;
; break;
;
	.dbg	line, "mandelbrot.c", 87
	jmp     L0021
;
; tgi_setcolor (count % maxcol);
;
	.dbg	line, "mandelbrot.c", 89
L0029:	lda     regbank+5
	jsr     pusha0
	lda     regbank+0
	jsr     tosumoda0
L0021:	jsr     _tgi_setcolor
;
; tgi_setpixel (x, y);
;
	.dbg	line, "mandelbrot.c", 93
	lda     M0006
	ldx     M0006+1
	jsr     pushax
	lda     M0007
	ldx     M0007+1
	jsr     _tgi_setpixel
;
; for (x = 0; x < (SCREEN_X); x++) {
;
	.dbg	line, "mandelbrot.c", 65
	inc     M0006
	jne     L0007
	inc     M0006+1
	jmp     L0007
;
; for (y = 0; y < (SCREEN_Y); y++) {
;
	.dbg	line, "mandelbrot.c", 62
L0004:	inc     M0007
	jne     L0002
	inc     M0007+1
	jmp     L0002
;
; }
;
	.dbg	line, "mandelbrot.c", 96
L0003:	ldy     #$00
L001F:	lda     (sp),y
	sta     regbank+0,y
	iny
	cpy     #$06
	bne     L001F
	ldy     #$0E
	jmp     addysp

	.dbg	line
.segment	"BSS"

M0001:
	.res	2,$00
M0002:
	.res	2,$00
M0003:
	.res	2,$00
M0004:
	.res	2,$00
M0005:
	.res	2,$00
M0006:
	.res	2,$00
M0007:
	.res	2,$00

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; clrscr ();
;
	.dbg	line, "mandelbrot.c", 105
	jsr     _clrscr
;
; cprintf ("initializing... mompls\r\n");
;
	.dbg	line, "mandelbrot.c", 109
	lda     #<(S0002)
	ldx     #>(S0002)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; tgi_load_driver (tgi_stddrv);
;
	.dbg	line, "mandelbrot.c", 110
	lda     #<(_tgi_stddrv)
	ldx     #>(_tgi_stddrv)
	jsr     _tgi_load_driver
;
; err = tgi_geterror ();
;
	.dbg	line, "mandelbrot.c", 115
	jsr     _tgi_geterror
	sta     M0004
;
; if (err  != TGI_ERR_OK) {
;
	.dbg	line, "mandelbrot.c", 116
	lda     M0004
	beq     L0002
;
; cprintf ("Error #%d initializing graphics.\r\n%s\r\n",
;
	.dbg	line, "mandelbrot.c", 117
	lda     #<(S0003)
	ldx     #>(S0003)
	jsr     pushax
;
; err, tgi_geterrormsg (err));
;
	.dbg	line, "mandelbrot.c", 118
	lda     M0004
	jsr     pusha0
	lda     M0004
	jsr     _tgi_geterrormsg
	jsr     pushax
	ldy     #$06
	jsr     _cprintf
;
; if (doesclrscrafterexit ()) {
;
	.dbg	line, "mandelbrot.c", 119
	jsr     _doesclrscrafterexit
	tax
	beq     L0005
;
; cgetc ();
;
	.dbg	line, "mandelbrot.c", 120
	jsr     _cgetc
;
; exit (EXIT_FAILURE);
;
	.dbg	line, "mandelbrot.c", 122
	ldx     #$00
L0005:	lda     #$01
	jsr     _exit
;
; cprintf ("ok.\n\r");
;
	.dbg	line, "mandelbrot.c", 124
L0002:	lda     #<(S0004)
	ldx     #>(S0004)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; tgi_init ();
;
	.dbg	line, "mandelbrot.c", 127
	jsr     _tgi_init
;
; tgi_clear ();
;
	.dbg	line, "mandelbrot.c", 128
	jsr     _tgi_clear
;
; t = clock ();
;
	.dbg	line, "mandelbrot.c", 130
	jsr     _clock
	sta     M0001
	stx     M0001+1
	ldy     sreg
	sty     M0001+2
	ldy     sreg+1
	sty     M0001+3
;
; mandelbrot (tofp (-2), tofp (-2), tofp (2), tofp (2));
;
	.dbg	line, "mandelbrot.c", 133
	jsr     decsp6
	lda     #$00
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$F8
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$F8
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$08
	sta     (sp),y
	tax
	lda     #$00
	jsr     _mandelbrot
;
; t = clock () - t;
;
	.dbg	line, "mandelbrot.c", 135
	jsr     _clock
	jsr     pusheax
	lda     M0001+3
	sta     sreg+1
	lda     M0001+2
	sta     sreg
	ldx     M0001+1
	lda     M0001
	jsr     tossubeax
	sta     M0001
	stx     M0001+1
	ldy     sreg
	sty     M0001+2
	ldy     sreg+1
	sty     M0001+3
;
; cgetc ();
;
	.dbg	line, "mandelbrot.c", 138
	jsr     _cgetc
;
; tgi_done ();
;
	.dbg	line, "mandelbrot.c", 141
	jsr     _tgi_done
;
; sec = (t * 10) / CLK_TCK;
;
	.dbg	line, "mandelbrot.c", 144
	lda     M0001+3
	sta     sreg+1
	lda     M0001+2
	sta     sreg
	ldx     M0001+1
	lda     M0001
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumul0ax
	jsr     pusheax
	ldx     #$00
	lda     #$3C
	jsr     tosudiv0ax
	sta     M0002
	stx     M0002+1
	ldy     sreg
	sty     M0002+2
	ldy     sreg+1
	sty     M0002+3
;
; sec10 = sec % 10;
;
	.dbg	line, "mandelbrot.c", 145
	lda     M0002+3
	sta     sreg+1
	lda     M0002+2
	sta     sreg
	ldx     M0002+1
	lda     M0002
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosumod0ax
	sta     M0003
	stx     M0003+1
;
; sec /= 10;
;
	.dbg	line, "mandelbrot.c", 146
	lda     M0002+3
	sta     sreg+1
	lda     M0002+2
	sta     sreg
	ldx     M0002+1
	lda     M0002
	jsr     pusheax
	ldx     #$00
	lda     #$0A
	jsr     tosudiv0ax
	sta     M0002
	stx     M0002+1
	ldy     sreg
	sty     M0002+2
	ldy     sreg+1
	sty     M0002+3
;
; cprintf ("time  : %lu.%us\n\r", sec, sec10);
;
	.dbg	line, "mandelbrot.c", 149
	lda     #<(S0005)
	ldx     #>(S0005)
	jsr     pushax
	lda     M0002+3
	sta     sreg+1
	lda     M0002+2
	sta     sreg
	ldx     M0002+1
	lda     M0002
	jsr     pusheax
	lda     M0003
	ldx     M0003+1
	jsr     pushax
	ldy     #$08
	jsr     _cprintf
;
; if (doesclrscrafterexit ()) {
;
	.dbg	line, "mandelbrot.c", 151
	jsr     _doesclrscrafterexit
	tax
	beq     L0007
;
; cputs ("Press any key when done...\n\r");
;
	.dbg	line, "mandelbrot.c", 153
	lda     #<(S0006)
	ldx     #>(S0006)
	jsr     _cputs
;
; cgetc ();
;
	.dbg	line, "mandelbrot.c", 154
	jsr     _cgetc
;
; return EXIT_SUCCESS;
;
	.dbg	line, "mandelbrot.c", 158
	ldx     #$00
	txa
;
; }
;
	.dbg	line, "mandelbrot.c", 159
L0007:	rts

	.dbg	line
.segment	"BSS"

M0001:
	.res	4,$00
M0002:
	.res	4,$00
M0003:
	.res	2,$00
M0004:
	.res	1,$00

.endproc

